name: Generate Metro RSS Feed

on:
  schedule:
    # Run every 6 hours at minutes 5, 10, and 15 past the hour to avoid peak times
    - cron: '5 */6 * * *'    # Every 6 hours at :05
    - cron: '10 */6 * * *'   # Every 6 hours at :10 (backup)
    - cron: '15 */6 * * *'   # Every 6 hours at :15 (second backup)
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'generate_metro_rss.py'
      - '.github/workflows/metro-rss.yml'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  generate-metro-rss:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Check current directory and files
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        echo "Git status:"
        git status

    - name: Generate Metro RSS Feed
      id: generate_rss
      run: |
        echo "Starting Metro RSS feed generation..."
        python generate_metro_rss.py
        echo "RSS generation completed."
        
        # Check if RSS file was created/updated
        if [ -f "metro_feed.xml" ]; then
          echo "RSS feed file exists"
          echo "rss_generated=true" >> $GITHUB_OUTPUT
        else
          echo "RSS feed file not found"
          echo "rss_generated=false" >> $GITHUB_OUTPUT
        fi

    - name: Check for changes
      id: check_changes
      run: |
        git add -A
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected"
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changed files:"
          git diff --staged --name-only
        fi

    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git add -A
        git commit -m "🤖 Auto-update Metro RSS feed - $(date '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Push with retry logic
        max_retries=3
        retry_count=0
        
        while [ $retry_count -lt $max_retries ]; do
          if git push origin main; then
            echo "Successfully pushed changes"
            break
          else
            retry_count=$((retry_count + 1))
            echo "Push failed, attempt $retry_count/$max_retries"
            if [ $retry_count -lt $max_retries ]; then
              echo "Waiting 10 seconds before retry..."
              sleep 10
              git pull --rebase origin main
            fi
          fi
        done
        
        if [ $retry_count -eq $max_retries ]; then
          echo "Failed to push after $max_retries attempts"
          exit 1
        fi

    - name: Upload RSS feed as artifact
      if: steps.generate_rss.outputs.rss_generated == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: metro-rss-feed
        path: metro_feed.xml
        retention-days: 30

    - name: Log completion
      run: |
        echo "Metro RSS generation workflow completed at $(date)"
        if [ -f "metro_feed.xml" ]; then
          echo "RSS feed size: $(wc -c < metro_feed.xml) bytes"
          echo "RSS feed items: $(grep -c '<item>' metro_feed.xml || echo '0')"
        fi
        if [ -f "metro_rss_generator.log" ]; then
          echo "Last 20 lines of log:"
          tail -20 metro_rss_generator.log
        fi

  # Health check job that runs after the main job
  health-check:
    needs: generate-metro-rss
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies for validation
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 lxml

    - name: Validate RSS Feed
      run: |
        python - << 'EOF'
        import xml.etree.ElementTree as ET
        import requests
        import sys
        import os
        
        def validate_local_rss():
            """Validate the locally generated RSS file"""
            if not os.path.exists('metro_feed.xml'):
                print("❌ RSS feed file not found")
                return False
                
            try:
                tree = ET.parse('metro_feed.xml')
                root = tree.getroot()
                
                # Check basic RSS structure
                if root.tag != 'rss':
                    print("❌ Invalid RSS format - root element is not 'rss'")
                    return False
                    
                channel = root.find('channel')
                if channel is None:
                    print("❌ No channel element found")
                    return False
                    
                title = channel.find('title')
                if title is None or not title.text:
                    print("❌ No title found in channel")
                    return False
                    
                items = channel.findall('item')
                print(f"✅ RSS feed validation passed. Found {len(items)} items")
                print(f"   Title: {title.text}")
                
                # Check if items have required elements
                valid_items = 0
                for item in items:
                    if (item.find('title') is not None and 
                        item.find('link') is not None and 
                        item.find('guid') is not None):
                        valid_items += 1
                        
                print(f"   Valid items: {valid_items}/{len(items)}")
                return True
                
            except ET.ParseError as e:
                print(f"❌ RSS XML parsing error: {e}")
                return False
            except Exception as e:
                print(f"❌ RSS validation error: {e}")
                return False
        
        def check_github_pages():
            """Check if the RSS feed is accessible via GitHub Pages"""
            try:
                url = "https://owais5514.github.io/Metro-timings/metro_feed.xml"
                response = requests.get(url, timeout=10)
                
                if response.status_code == 200:
                    print(f"✅ RSS feed accessible at GitHub Pages: {url}")
                    return True
                else:
                    print(f"⚠️  RSS feed not yet available at GitHub Pages (Status: {response.status_code})")
                    print("   This is normal for newly generated feeds - GitHub Pages deployment may take a few minutes")
                    return True  # Don't fail the check for this
                    
            except requests.exceptions.RequestException as e:
                print(f"⚠️  Could not check GitHub Pages availability: {e}")
                return True  # Don't fail the check for this
        
        # Run validations
        local_valid = validate_local_rss()
        pages_check = check_github_pages()
        
        if not local_valid:
            print("❌ Health check failed - RSS validation issues")
            sys.exit(1)
        else:
            print("✅ Health check passed")
        EOF

    - name: Report Status
      if: always()
      run: |
        echo "Health check completed at $(date)"
        if [ "${{ needs.generate-metro-rss.result }}" = "success" ]; then
          echo "✅ Main RSS generation job succeeded"
        else
          echo "❌ Main RSS generation job failed with status: ${{ needs.generate-metro-rss.result }}"
        fi

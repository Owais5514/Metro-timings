name: Health Check - Metro RSS System

on:
  schedule:
    # Run health checks every 2 hours
    - cron: '0 */2 * * *'
    # Additional checks at different minutes to spread load
    - cron: '30 8,20 * * *'  # 8:30 AM and 8:30 PM UTC
  workflow_dispatch: # Allow manual triggering
  workflow_run:
    workflows: ["Generate Metro RSS Feed"]
    types:
      - completed

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 lxml

    - name: Run comprehensive health check
      id: health_check
      run: |
        echo "Running Metro RSS health check..."
        python health_check.py
        health_status=$?
        
        echo "health_status=$health_status" >> $GITHUB_OUTPUT
        
        # Check if health report was generated
        if [ -f "health_report.json" ]; then
          echo "Health report generated successfully"
          echo "health_report_exists=true" >> $GITHUB_OUTPUT
          
          # Extract key metrics from health report
          if command -v jq >/dev/null 2>&1; then
            overall_health=$(jq -r '.overall_health' health_report.json)
            echo "overall_health=$overall_health" >> $GITHUB_OUTPUT
            echo "Overall health status: $overall_health"
          fi
        else
          echo "health_report_exists=false" >> $GITHUB_OUTPUT
        fi
        
        exit $health_status

    - name: Validate RSS feed if exists
      run: |
        if [ -f "metro_feed.xml" ]; then
          echo "Validating RSS feed..."
          python validate_feeds.py --file metro_feed.xml --skip-remote
        else
          echo "No RSS feed file found to validate"
        fi

    - name: Check GitHub Pages deployment
      run: |
        echo "Checking GitHub Pages deployment..."
        
        # Test if the main page is accessible
        if curl -s -o /dev/null -w "%{http_code}" "https://owais5514.github.io/Metro-timings/" | grep -q "200"; then
          echo "‚úÖ Main page is accessible"
        else
          echo "‚ö†Ô∏è  Main page accessibility issue"
        fi
        
        # Test if RSS feed is accessible
        rss_status=$(curl -s -o /dev/null -w "%{http_code}" "https://owais5514.github.io/Metro-timings/metro_feed.xml")
        if [ "$rss_status" = "200" ]; then
          echo "‚úÖ RSS feed is accessible via GitHub Pages"
        else
          echo "‚ö†Ô∏è  RSS feed not accessible via GitHub Pages (Status: $rss_status)"
          if [ "$rss_status" = "404" ]; then
            echo "   This might be normal if the RSS feed hasn't been generated yet"
          fi
        fi

    - name: Upload health report as artifact
      if: steps.health_check.outputs.health_report_exists == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: health-report-${{ github.run_number }}
        path: health_report.json
        retention-days: 7

    - name: Create issue on critical failure
      if: failure() && steps.health_check.outputs.health_status != '0'
      uses: actions/github-script@v6
      with:
        script: |
          const title = `üö® Metro RSS System Health Check Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## Health Check Failure Report
          
          **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          **Time:** ${new Date().toISOString()}
          **Status:** Health check failed with critical issues
          
          ### Possible Issues:
          - RSS feed generation problems
          - Source website accessibility issues  
          - GitHub Pages deployment problems
          - XML parsing or validation errors
          
          ### Next Steps:
          1. Check the workflow logs for detailed error messages
          2. Verify source websites are accessible
          3. Run manual health check: \`python health_check.py\`
          4. Validate RSS feed: \`python validate_feeds.py\`
          
          ### Auto-Resolution:
          This issue will auto-close if the next health check passes.
          
          ---
          *This issue was automatically created by the health check workflow.*
          `;
          
          // Check if there's already an open health check issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['health-check', 'automated'],
            state: 'open'
          });
          
          if (issues.data.length === 0) {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['health-check', 'automated', 'critical']
            });
            console.log('Created new health check issue');
          } else {
            // Update existing issue
            const existingIssue = issues.data[0];
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `## Additional Health Check Failure\n\n**Time:** ${new Date().toISOString()}\n**Workflow:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\nHealth check continues to fail. Please investigate.`
            });
            console.log('Updated existing health check issue');
          }

    - name: Close health check issues on success
      if: success() && steps.health_check.outputs.health_status == '0'
      uses: actions/github-script@v6
      with:
        script: |
          // Find open health check issues
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['health-check', 'automated'],
            state: 'open'
          });
          
          for (const issue of issues.data) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `## ‚úÖ Health Check Recovered\n\n**Time:** ${new Date().toISOString()}\n**Workflow:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\nHealth check is now passing. Auto-closing this issue.`
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
            
            console.log(`Closed health check issue #${issue.number}`);
          }

    - name: Summary
      if: always()
      run: |
        echo "Health check completed at $(date)"
        echo "Status: ${{ steps.health_check.outputs.health_status }}"
        
        if [ "${{ steps.health_check.outputs.health_status }}" = "0" ]; then
          echo "‚úÖ All health checks passed"
        else
          echo "‚ùå Health check detected issues"
        fi
        
        if [ -f "health_report.json" ]; then
          echo "üìä Health report generated and available as artifact"
        fi
